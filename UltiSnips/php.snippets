global !p
from php_snippets_helper import *
endglobal

snippet <? "<?php" b
<?php

$0
endsnippet

snippet vd "var_dump"
var_dump($0);
endsnippet

snippet d "dump"
dump($0);
endsnippet

snippet vdd "var_dump; die"
var_dump($0); die();
endsnippet

snippet n "namespace" b
namespace `!p snip.rv = namespace(path)`;
$0
endsnippet

snippet nc "namespace (abstract)class/interface/trait" b
namespace `!p snip.rv = namespace(path)`;

`!p 
if 'Abstract' in snip.basename: snip.rv = 'abstract '
``!p
if 'Interface' in snip.basename:
	snip.rv = 'interface'
elif 'Trait' in snip.basename:
	snip.rv = 'trait'
else:
	snip.rv = 'class'
` `!p
snip.rv = snip.basename
`
{
	$0
}
endsnippet

snippet __ "__constructor" b
${1:public} function __construct($2)
{
	$0
}
endsnippet

snippet sg "Setter/Getter" b
/**
 * @var ${3:`!p snip.rv = t[2][0:1].upper() + t[2][1:]`}
 * 
 * ${0}
 */
${1:private} $$2;

/**
 * @param $3
 *
 * @return self
 */
public function set`!p
snip.rv = t[2][0:1].upper() + t[2][1:]
`(`!p
snip.rv = t[3] + ' ' if re.match(r'^\\|[A-Z]', t[3]) else ''
`$$2)
{
	$this->$2 = $$2;

	return $this;
}

/**
 * @return $3
 */
public function get`!p snip.rv = t[2][0:1].upper() + t[2][1:]`()
{
	return $this->$2;
}
endsnippet

snippet g "Getter" b
public function get`!p snip.rv = t[1][0:1].upper() + t[1][1:]`()
{
	return $this->$1;
}
endsnippet

snippet $t= "$this->foo = $foo" b
$this->$1 = $$1;$0
endsnippet

snippet /** "php comment block" b
/**
 * $0
 */
endsnippet

snippet pub "public function" b
public function $1($2)
{
	$0
}
endsnippet

snippet pro "protected function" b
protected function $1($2)
{
	$0
}
endsnippet

snippet pri "private function" b
private function $1($2)
{
	$0
}
endsnippet

snippet if "if" b
if ($1) {
	$0
}
endsnippet

snippet for "for" b
for ($i = 0; $i < $1; ++$i) {
	$0
}
endsnippet

snippet fore "foreach" b
foreach ($1 as $$2) {
	$0
}
endsnippet

snippet forek "foreach key => val" b
foreach ($1 as $$2 => $$3) {
	$0
}
endsnippet
